/* ----------------------------
   CASE STUDY #1: DANNY'S DINER
   Author: Lisda Panjaitan
   Tool: PostgreSQL v13
   Date: 07/09/2021
   ---------------------------*/
   
--SCHEMA--
CREATE SCHEMA dannys_diner;
SET search_path = dannys_diner;

CREATE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 
CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  
CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A', '2021-01-07'),
  ('B', '2021-01-09');
  
 
-- 1. What is the total amount each customer spent at the restaurant?
SELECT 
    s.customer_id,
    SUM(price) AS total_amount
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
    ON s.product_id=m.product_id
GROUP BY s.customer_id
ORDER BY total_amount DESC;


-- 2. How many days has each customer visited the restaurant?
SELECT 
    customer_id,
    COUNT(DISTINCT order_date) AS total_days
FROM dannys_diner.sales
GROUP BY customer_id
ORDER BY total_days DESC;


-- 3. What was the first item from the menu purchased by each customer?
SELECT 
    customer_id, 
    product_name
FROM (
	SELECT 
    	s.customer_id, 
    	s.order_date, 
    	m.product_name,
		DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date) AS rank
	FROM dannys_diner.sales AS s
	JOIN dannys_diner.menu AS m
		ON s.product_id = m.product_id) AS order_rank
WHERE rank = 1
GROUP BY customer_id, product_name;


-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT
    m.product_name,
    COUNT(product_name) AS number_items
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
    ON s.product_id = m.product_id
GROUP BY m.product_name
ORDER BY number_items DESC
LIMIT 1;
    
               
-- 5. Which item was the most popular for each customer?
SELECT
    customer_id,
    product_name,
    number_items
FROM (
  SELECT
    s.customer_id,
    m.product_name,
    COUNT(m.product_id) AS number_items,
  	DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY
    count(m.product_id) desc) AS rank
  FROM dannys_diner.sales AS s
  JOIN dannys_diner.menu AS m
  	ON s.product_id = m.product_id
	GROUP BY s.customer_id, m.product_name) AS item_rank
WHERE rank=1;

   
-- 6. Which item was purchased first by the customer after they became a member?
SELECT
    customer_id,
    product_name
FROM (
  SELECT
  	s.customer_id,
  	m.product_name,
  	DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date) 	AS rank
  FROM dannys_diner.sales AS s
  JOIN dannys_diner.menu AS m
	ON s.product_id = m.product_id
  JOIN dannys_diner.members AS ms
	ON s.customer_id = ms.customer_id
  WHERE s.order_date >= ms.join_date) AS first_buy
WHERE rank=1;


-- 7. Which item was purchased just before the customer became a member?
SELECT
    customer_id,
    product_name
FROM (
  SELECT
  	s.customer_id,
  	m.product_name,
  	DENSE_RANK() OVER(PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS rank
  FROM dannys_diner.sales AS s
  JOIN dannys_diner.menu AS m
	ON s.product_id = m.product_id
  JOIN dannys_diner.members AS ms
	ON s.customer_id = ms.customer_id
  WHERE s.order_date < ms.join_date) AS first_buy
WHERE rank=1;


-- 8. What is the total items and amount spent for each member before they became a member?
SELECT
    s.customer_id,
    COUNT(DISTINCT s.product_id) AS total_items,
    SUM(m.price) AS amount_spent
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
    ON s.product_id = m.product_id
JOIN dannys_diner.members AS ms
    ON s.customer_id = ms.customer_id
WHERE s.order_date < ms.join_date
GROUP BY s.customer_id;
 

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT
    s.customer_id,
    SUM(p.points) AS total_points
FROM (
  	SELECT *,
  	CASE WHEN m.product_name='sushi' THEN m.price*2*10
        ELSE m.price*10
        END AS points
	FROM dannys_diner.menu as m) AS p 
JOIN dannys_diner.sales AS s
ON p.product_id = s.product_id
GROUP BY s.customer_id
ORDER BY total_points DESC;


-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
SELECT
    p.customer_id,
    SUM(p.points) AS total_points
FROM (
  	SELECT s.customer_id, CASE
  	WHEN m.product_name='sushi' AND s.order_date-ms.join_date<7 THEN m.price*2*10
  	WHEN s.order_date-ms.join_date>=7 THEN m.price*2*10
        ELSE m.price*10
        END AS points
  	FROM dannys_diner.sales AS s
	JOIN dannys_diner.menu AS m
		ON s.product_id = m.product_id
	JOIN dannys_diner.members AS ms
		ON s.customer_id = ms.customer_id) AS p
GROUP BY p.customer_id
ORDER BY total_points DESC;


--BONUS QUESTIONS--
--Join All The Things and Ranks--
WITH summary AS (
SELECT
    s.customer_id,
    s.order_date,
    m.product_name,
    m.price,
    CASE WHEN ms.join_date <= s.order_date THEN 'Y'
    ELSE 'N' END AS member
FROM dannys_diner.sales AS s
JOIN dannys_diner.menu AS m
	ON s.product_id = m.product_id
JOIN dannys_diner.members AS ms
	ON s.customer_id = ms.customer_id)
	
SELECT *,
	CASE WHEN member = 'Y' THEN RANK () OVER(PARTITION BY customer_id, member ORDER BY order_date)
        ELSE NULL END AS ranking
FROM summary;
